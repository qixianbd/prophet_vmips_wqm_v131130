.TH "speculativecpu.h" 3 "18 Dec 2013" "Doxygen" \" -*- nroff -*-
.ad l
.nh
.SH NAME
speculativecpu.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'cpu.h'\fP
.br
\fC#include 'obstack.h'\fP
.br
\fC#include 'predefine.h'\fP
.br
\fC#include 'prophetlog.h'\fP
.br
\fC#include 'prophetstatistic.h'\fP
.br
\fC#include 'prophetfpu.h'\fP
.br
\fC#include <iostream>\fP
.br

.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBBYTE_PER_WORD\fP   4"
.br
.ti -1c
.RI "#define \fBCACHE_STATISTIC\fP"
.br
.ti -1c
.RI "#define \fBSTABLE_VERSION\fP   1"
.br
.ti -1c
.RI "#define \fBValide0\fP(p)   ((p)->m_Entry.m_IsValide[0])"
.br
.ti -1c
.RI "#define \fBValide1\fP(p)   ((p)->m_Entry.m_IsValide[1])"
.br
.ti -1c
.RI "#define \fBValide2\fP(p)   ((p)->m_Entry.m_IsValide[2])"
.br
.ti -1c
.RI "#define \fBValide3\fP(p)   ((p)->m_Entry.m_IsValide[3])"
.br
.ti -1c
.RI "#define \fBIsValide0\fP(p)   ((p) && Valide0(p))"
.br
.ti -1c
.RI "#define \fBIsValide1\fP(p)   ((p) && Valide1(p))"
.br
.ti -1c
.RI "#define \fBIsValide2\fP(p)   ((p) && Valide2(p))"
.br
.ti -1c
.RI "#define \fBIsValide3\fP(p)   ((p) && Valide3(p))"
.br
.ti -1c
.RI "#define \fBIsValideLowhalfWord\fP(p)   (IsValide0(p) && IsValide1(p))"
.br
.ti -1c
.RI "#define \fBIsValideHighhalfWord\fP(p)   (IsValide2(p) && IsValide3(p))"
.br
.ti -1c
.RI "#define \fBIsValideWord\fP(p)   (IsValideLowhalfWord(p) && IsValideHighhalfWord(p))"
.br
.ti -1c
.RI "#define \fBIsValideSomeLowhalf\fP(p)   (IsValide0(p) || IsValide1(p))"
.br
.ti -1c
.RI "#define \fBIsValideSomeHighhalf\fP(p)   (IsValide2(p) || IsValide3(p))"
.br
.ti -1c
.RI "#define \fBIsValideSome\fP(p)   (IsValideSomeLowhalf(p) || IsValideSomeHighhalf(p))"
.br
.ti -1c
.RI "#define \fBRemoteLoaded0\fP(p)   ((p)->m_Entry.m_IsRemoteLoaded[0])"
.br
.ti -1c
.RI "#define \fBRemoteLoaded1\fP(p)   ((p)->m_Entry.m_IsRemoteLoaded[1])"
.br
.ti -1c
.RI "#define \fBRemoteLoaded2\fP(p)   ((p)->m_Entry.m_IsRemoteLoaded[2])"
.br
.ti -1c
.RI "#define \fBRemoteLoaded3\fP(p)   ((p)->m_Entry.m_IsRemoteLoaded[3])"
.br
.ti -1c
.RI "#define \fBIsRemoteLoadedSomeHighhalf\fP(p)   (RemoteLoaded2(p) || RemoteLoaded3(p))"
.br
.ti -1c
.RI "#define \fBIsRemoteLoadedSomeLowhalf\fP(p)   (RemoteLoaded0(p) || RemoteLoaded1(p))"
.br
.ti -1c
.RI "#define \fBIsRemoteLoadedSome\fP(p)   (IsRemoteLoadedSomeLowhalf(p) || IsRemoteLoadedSomeHighhalf(p))"
.br
.ti -1c
.RI "#define \fBModified0\fP(p)   ((p)->m_Entry.m_IsModified[0])"
.br
.ti -1c
.RI "#define \fBModified1\fP(p)   ((p)->m_Entry.m_IsModified[1])"
.br
.ti -1c
.RI "#define \fBModified2\fP(p)   ((p)->m_Entry.m_IsModified[2])"
.br
.ti -1c
.RI "#define \fBModified3\fP(p)   ((p)->m_Entry.m_IsModified[3])"
.br
.ti -1c
.RI "#define \fBIsModified0\fP(p)   ((p) && Modified0(p))"
.br
.ti -1c
.RI "#define \fBIsModified1\fP(p)   ((p) && Modified1(p))"
.br
.ti -1c
.RI "#define \fBIsModified2\fP(p)   ((p) && Modified2(p))"
.br
.ti -1c
.RI "#define \fBIsModified3\fP(p)   ((p) && Modified3(p))"
.br
.ti -1c
.RI "#define \fBIsModifiedHighhalfWord\fP(p)   (IsModified2(p) && IsModified3(p))"
.br
.ti -1c
.RI "#define \fBIsModifiedLowhalfWord\fP(p)   (IsModified0(p) && IsModified1(p))"
.br
.ti -1c
.RI "#define \fBIsModifiedWord\fP(p)   (IsModifiedLowhalfWord(p) && IsModifiedHighhalfWord(p))"
.br
.ti -1c
.RI "#define \fBIsModifiedSome\fP(p)   (IsModified0(p) || IsModified1(p) || IsModified2(p) || IsModified3(p))"
.br
.ti -1c
.RI "#define \fBIsOld\fP(p)   ((p)->m_Entry.m_IsOld)"
.br
.ti -1c
.RI "#define \fBVersion\fP(p)   ((p)->m_Entry.m_Version)"
.br
.ti -1c
.RI "#define \fBAddress\fP(p)   ((p)->m_Entry.m_Address)"
.br
.ti -1c
.RI "#define \fBValue\fP(p)   ((p)->m_Entry.m_Value)"
.br
.ti -1c
.RI "#define \fBRound4\fP(a)   ((a) / 4 * 4)"
.br
.ti -1c
.RI "#define \fBLowhalfOfWord\fP(value)   (*((uint16*)((void*)(&(value)))))"
.br
.ti -1c
.RI "#define \fBHighhalfOfWord\fP(value)   (*((uint16*)((char*)(&(value)) + 2)))"
.br
.ti -1c
.RI "#define \fBByte0OfWord\fP(value)   (*((uint8*)((char*)(&(value)))))"
.br
.ti -1c
.RI "#define \fBByte1OfWord\fP(value)   (*((uint8*)((char*)(&(value)) + 1)))"
.br
.ti -1c
.RI "#define \fBByte2OfWord\fP(value)   (*((uint8*)((char*)(&(value)) + 2)))"
.br
.ti -1c
.RI "#define \fBByte3OfWord\fP(value)   (*((uint8*)((char*)(&(value)) + 3)))"
.br
.ti -1c
.RI "#define \fBWord\fP(startbyte)   (*((uint32*)(&(startbyte))))"
.br
.ti -1c
.RI "#define \fBHalfWord\fP(startbyte)   LowhalfOfWord(startbyte)"
.br
.ti -1c
.RI "#define \fBSwapHalfWord\fP(value)   (((((value) & 0x00ff) << 8)) | (((value) >> 8) & 0x00ff))"
.br
.ti -1c
.RI "#define \fBSwapWord\fP(value)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBPROPHET_STAT_CLASS\fP (SpeculativeCPU) WITH_PUBLIC_ROOT(\fBCPU\fP)"
.br
.in -1c
.SH "Define Documentation"
.PP 
.SS "#define Address(p)   ((p)->m_Entry.m_Address)"
.SS "#define Byte0OfWord(value)   (*((uint8*)((char*)(&(value)))))"
.SS "#define Byte1OfWord(value)   (*((uint8*)((char*)(&(value)) + 1)))"
.SS "#define Byte2OfWord(value)   (*((uint8*)((char*)(&(value)) + 2)))"
.SS "#define Byte3OfWord(value)   (*((uint8*)((char*)(&(value)) + 3)))"
.SS "#define BYTE_PER_WORD   4"
.SS "#define CACHE_STATISTIC"
.SS "#define HalfWord(startbyte)   LowhalfOfWord(startbyte)"
.SS "#define HighhalfOfWord(value)   (*((uint16*)((char*)(&(value)) + 2)))"
.SS "#define IsModified0(p)   ((p) && Modified0(p))"
.SS "#define IsModified1(p)   ((p) && Modified1(p))"
.SS "#define IsModified2(p)   ((p) && Modified2(p))"
.SS "#define IsModified3(p)   ((p) && Modified3(p))"
.SS "#define IsModifiedHighhalfWord(p)   (IsModified2(p) && IsModified3(p))"
.SS "#define IsModifiedLowhalfWord(p)   (IsModified0(p) && IsModified1(p))"
.SS "#define IsModifiedSome(p)   (IsModified0(p) || IsModified1(p) || IsModified2(p) || IsModified3(p))"
.SS "#define IsModifiedWord(p)   (IsModifiedLowhalfWord(p) && IsModifiedHighhalfWord(p))"
.SS "#define IsOld(p)   ((p)->m_Entry.m_IsOld)"
.SS "#define IsRemoteLoadedSome(p)   (IsRemoteLoadedSomeLowhalf(p) || IsRemoteLoadedSomeHighhalf(p))"
.SS "#define IsRemoteLoadedSomeHighhalf(p)   (RemoteLoaded2(p) || RemoteLoaded3(p))"
.SS "#define IsRemoteLoadedSomeLowhalf(p)   (RemoteLoaded0(p) || RemoteLoaded1(p))"
.SS "#define IsValide0(p)   ((p) && Valide0(p))"
.SS "#define IsValide1(p)   ((p) && Valide1(p))"
.SS "#define IsValide2(p)   ((p) && Valide2(p))"
.SS "#define IsValide3(p)   ((p) && Valide3(p))"
.SS "#define IsValideHighhalfWord(p)   (IsValide2(p) && IsValide3(p))"
.SS "#define IsValideLowhalfWord(p)   (IsValide0(p) && IsValide1(p))"
.SS "#define IsValideSome(p)   (IsValideSomeLowhalf(p) || IsValideSomeHighhalf(p))"
.SS "#define IsValideSomeHighhalf(p)   (IsValide2(p) || IsValide3(p))"
.SS "#define IsValideSomeLowhalf(p)   (IsValide0(p) || IsValide1(p))"
.SS "#define IsValideWord(p)   (IsValideLowhalfWord(p) && IsValideHighhalfWord(p))"
.SS "#define LowhalfOfWord(value)   (*((uint16*)((void*)(&(value)))))"
.SS "#define Modified0(p)   ((p)->m_Entry.m_IsModified[0])"
.SS "#define Modified1(p)   ((p)->m_Entry.m_IsModified[1])"
.SS "#define Modified2(p)   ((p)->m_Entry.m_IsModified[2])"
.SS "#define Modified3(p)   ((p)->m_Entry.m_IsModified[3])"
.SS "#define RemoteLoaded0(p)   ((p)->m_Entry.m_IsRemoteLoaded[0])"
.SS "#define RemoteLoaded1(p)   ((p)->m_Entry.m_IsRemoteLoaded[1])"
.SS "#define RemoteLoaded2(p)   ((p)->m_Entry.m_IsRemoteLoaded[2])"
.SS "#define RemoteLoaded3(p)   ((p)->m_Entry.m_IsRemoteLoaded[3])"
.SS "#define Round4(a)   ((a) / 4 * 4)"
.SS "#define STABLE_VERSION   1"
.SS "#define SwapHalfWord(value)   (((((value) & 0x00ff) << 8)) | (((value) >> 8) & 0x00ff))"
.SS "#define SwapWord(value)"\fBValue:\fP
.PP
.nf
((((value) << 24) & 0xff000000) | (((value) << 8) & 0x00ff0000) | \
                        (((value) >> 8) & 0x0000ff00) | (((value) >> 24) & 0x000000ff))
.fi
.SS "#define Valide0(p)   ((p)->m_Entry.m_IsValide[0])"
.SS "#define Valide1(p)   ((p)->m_Entry.m_IsValide[1])"
.SS "#define Valide2(p)   ((p)->m_Entry.m_IsValide[2])"
.SS "#define Valide3(p)   ((p)->m_Entry.m_IsValide[3])"
.SS "#define Value(p)   ((p)->m_Entry.m_Value)"
.SS "#define Version(p)   ((p)->m_Entry.m_Version)"
.SS "#define Word(startbyte)   (*((uint32*)(&(startbyte))))"
.SH "Function Documentation"
.PP 
.SS "PROPHET_STAT_CLASS (SpeculativeCPU)"
.SH "Author"
.PP 
Generated automatically by Doxygen from the source code.
