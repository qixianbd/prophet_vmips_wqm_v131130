# Makefile.in generated by automake 1.10.2 from Makefile.am.
# test_code/vmips.regcheck/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



# Makefile.am automatically generated by testcase-maker.
# If you make changes here they will go away.


pkgdatadir = $(datadir)/prophet_vmips
pkglibdir = $(libdir)/prophet_vmips
pkgincludedir = $(includedir)/prophet_vmips
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = i686-pc-linux-gnu
host_triplet = i686-pc-linux-gnu
target_triplet = i686-pc-linux-gnu
noinst_PROGRAMS = bgezal$(EXEEXT) xor$(EXEEXT) tester$(EXEEXT) \
	logical$(EXEEXT) mumble$(EXEEXT) divu$(EXEEXT) \
	mthi_lo$(EXEEXT) blez$(EXEEXT) haltdev$(EXEEXT) sub$(EXEEXT) \
	lwl$(EXEEXT) lwr$(EXEEXT) swl$(EXEEXT) swr$(EXEEXT) \
	multu$(EXEEXT) shift$(EXEEXT) coproc$(EXEEXT) bltz$(EXEEXT) \
	sltiu$(EXEEXT) addi$(EXEEXT) srlv$(EXEEXT) add$(EXEEXT) \
	jalr$(EXEEXT) bc0$(EXEEXT) load$(EXEEXT) tlbwr$(EXEEXT) \
	slti$(EXEEXT) store$(EXEEXT) handler5$(EXEEXT) bgtz$(EXEEXT) \
	syscall$(EXEEXT) bltzal$(EXEEXT)
subdir = test_code/vmips.regcheck
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/acinclude.m4 \
	$(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
PROGRAMS = $(noinst_PROGRAMS)
am_add_OBJECTS = add.$(OBJEXT)
add_OBJECTS = $(am_add_OBJECTS)
add_LDADD = $(LDADD)
am_addi_OBJECTS = addi.$(OBJEXT)
addi_OBJECTS = $(am_addi_OBJECTS)
addi_LDADD = $(LDADD)
am_bc0_OBJECTS = bc0.$(OBJEXT)
bc0_OBJECTS = $(am_bc0_OBJECTS)
bc0_LDADD = $(LDADD)
am_bgezal_OBJECTS = bgezal.$(OBJEXT)
bgezal_OBJECTS = $(am_bgezal_OBJECTS)
bgezal_LDADD = $(LDADD)
am_bgtz_OBJECTS = bgtz.$(OBJEXT)
bgtz_OBJECTS = $(am_bgtz_OBJECTS)
bgtz_LDADD = $(LDADD)
am_blez_OBJECTS = blez.$(OBJEXT)
blez_OBJECTS = $(am_blez_OBJECTS)
blez_LDADD = $(LDADD)
am_bltz_OBJECTS = bltz.$(OBJEXT)
bltz_OBJECTS = $(am_bltz_OBJECTS)
bltz_LDADD = $(LDADD)
am_bltzal_OBJECTS = bltzal.$(OBJEXT)
bltzal_OBJECTS = $(am_bltzal_OBJECTS)
bltzal_LDADD = $(LDADD)
am_coproc_OBJECTS = coproc.$(OBJEXT)
coproc_OBJECTS = $(am_coproc_OBJECTS)
coproc_LDADD = $(LDADD)
am_divu_OBJECTS = divu.$(OBJEXT)
divu_OBJECTS = $(am_divu_OBJECTS)
divu_LDADD = $(LDADD)
am_haltdev_OBJECTS = haltdev.$(OBJEXT)
haltdev_OBJECTS = $(am_haltdev_OBJECTS)
haltdev_LDADD = $(LDADD)
am_handler5_OBJECTS = handler5.$(OBJEXT)
handler5_OBJECTS = $(am_handler5_OBJECTS)
handler5_LDADD = $(LDADD)
am_jalr_OBJECTS = jalr.$(OBJEXT)
jalr_OBJECTS = $(am_jalr_OBJECTS)
jalr_LDADD = $(LDADD)
am_load_OBJECTS = load.$(OBJEXT)
load_OBJECTS = $(am_load_OBJECTS)
load_LDADD = $(LDADD)
am_logical_OBJECTS = logical.$(OBJEXT)
logical_OBJECTS = $(am_logical_OBJECTS)
logical_LDADD = $(LDADD)
am_lwl_OBJECTS = lwl.$(OBJEXT)
lwl_OBJECTS = $(am_lwl_OBJECTS)
lwl_LDADD = $(LDADD)
am_lwr_OBJECTS = lwr.$(OBJEXT)
lwr_OBJECTS = $(am_lwr_OBJECTS)
lwr_LDADD = $(LDADD)
am_mthi_lo_OBJECTS = mthi_lo.$(OBJEXT)
mthi_lo_OBJECTS = $(am_mthi_lo_OBJECTS)
mthi_lo_LDADD = $(LDADD)
am_multu_OBJECTS = multu.$(OBJEXT)
multu_OBJECTS = $(am_multu_OBJECTS)
multu_LDADD = $(LDADD)
am_mumble_OBJECTS = mumble.$(OBJEXT)
mumble_OBJECTS = $(am_mumble_OBJECTS)
mumble_LDADD = $(LDADD)
am_shift_OBJECTS = shift.$(OBJEXT)
shift_OBJECTS = $(am_shift_OBJECTS)
shift_LDADD = $(LDADD)
am_slti_OBJECTS = slti.$(OBJEXT)
slti_OBJECTS = $(am_slti_OBJECTS)
slti_LDADD = $(LDADD)
am_sltiu_OBJECTS = sltiu.$(OBJEXT)
sltiu_OBJECTS = $(am_sltiu_OBJECTS)
sltiu_LDADD = $(LDADD)
am_srlv_OBJECTS = srlv.$(OBJEXT)
srlv_OBJECTS = $(am_srlv_OBJECTS)
srlv_LDADD = $(LDADD)
am_store_OBJECTS = store.$(OBJEXT)
store_OBJECTS = $(am_store_OBJECTS)
store_LDADD = $(LDADD)
store_LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(store_LDFLAGS) \
	$(LDFLAGS) -o $@
am_sub_OBJECTS = sub.$(OBJEXT)
sub_OBJECTS = $(am_sub_OBJECTS)
sub_LDADD = $(LDADD)
am_swl_OBJECTS = swl.$(OBJEXT)
swl_OBJECTS = $(am_swl_OBJECTS)
swl_LDADD = $(LDADD)
swl_LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(swl_LDFLAGS) $(LDFLAGS) -o \
	$@
am_swr_OBJECTS = swr.$(OBJEXT)
swr_OBJECTS = $(am_swr_OBJECTS)
swr_LDADD = $(LDADD)
swr_LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(swr_LDFLAGS) $(LDFLAGS) -o \
	$@
am_syscall_OBJECTS = syscall.$(OBJEXT)
syscall_OBJECTS = $(am_syscall_OBJECTS)
syscall_LDADD = $(LDADD)
am_tester_OBJECTS = tester.$(OBJEXT)
tester_OBJECTS = $(am_tester_OBJECTS)
tester_LDADD = $(LDADD)
tester_LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(tester_LDFLAGS) \
	$(LDFLAGS) -o $@
am_tlbwr_OBJECTS = tlbwr.$(OBJEXT)
tlbwr_OBJECTS = $(am_tlbwr_OBJECTS)
tlbwr_LDADD = $(LDADD)
tlbwr_LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(tlbwr_LDFLAGS) \
	$(LDFLAGS) -o $@
am_xor_OBJECTS = xor.$(OBJEXT)
xor_OBJECTS = $(am_xor_OBJECTS)
xor_LDADD = $(LDADD)
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
CPPASCOMPILE = $(CCAS) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CCASFLAGS) $(CCASFLAGS)
CCLD = $(CC)
SOURCES = $(add_SOURCES) $(addi_SOURCES) $(bc0_SOURCES) \
	$(bgezal_SOURCES) $(bgtz_SOURCES) $(blez_SOURCES) \
	$(bltz_SOURCES) $(bltzal_SOURCES) $(coproc_SOURCES) \
	$(divu_SOURCES) $(haltdev_SOURCES) $(handler5_SOURCES) \
	$(jalr_SOURCES) $(load_SOURCES) $(logical_SOURCES) \
	$(lwl_SOURCES) $(lwr_SOURCES) $(mthi_lo_SOURCES) \
	$(multu_SOURCES) $(mumble_SOURCES) $(shift_SOURCES) \
	$(slti_SOURCES) $(sltiu_SOURCES) $(srlv_SOURCES) \
	$(store_SOURCES) $(sub_SOURCES) $(swl_SOURCES) $(swr_SOURCES) \
	$(syscall_SOURCES) $(tester_SOURCES) $(tlbwr_SOURCES) \
	$(xor_SOURCES)
DIST_SOURCES = $(add_SOURCES) $(addi_SOURCES) $(bc0_SOURCES) \
	$(bgezal_SOURCES) $(bgtz_SOURCES) $(blez_SOURCES) \
	$(bltz_SOURCES) $(bltzal_SOURCES) $(coproc_SOURCES) \
	$(divu_SOURCES) $(haltdev_SOURCES) $(handler5_SOURCES) \
	$(jalr_SOURCES) $(load_SOURCES) $(logical_SOURCES) \
	$(lwl_SOURCES) $(lwr_SOURCES) $(mthi_lo_SOURCES) \
	$(multu_SOURCES) $(mumble_SOURCES) $(shift_SOURCES) \
	$(slti_SOURCES) $(sltiu_SOURCES) $(srlv_SOURCES) \
	$(store_SOURCES) $(sub_SOURCES) $(swl_SOURCES) $(swr_SOURCES) \
	$(syscall_SOURCES) $(tester_SOURCES) $(tlbwr_SOURCES) \
	$(xor_SOURCES)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/qmwx/project/prophet_vmips_final_keyming_131130/missing --run aclocal-1.10
AMTAR = ${SHELL} /home/qmwx/project/prophet_vmips_final_keyming_131130/missing --run tar
AS = 
ASFLAGS = 
AUTOCONF = ${SHELL} /home/qmwx/project/prophet_vmips_final_keyming_131130/missing --run autoconf
AUTOHEADER = ${SHELL} /home/qmwx/project/prophet_vmips_final_keyming_131130/missing --run autoheader
AUTOMAKE = ${SHELL} /home/qmwx/project/prophet_vmips_final_keyming_131130/missing --run automake-1.10
AWK = gawk
BIGENDIAN = nobigendian
CC = gcc
CCAS = gcc
CCASDEPMODE = depmode=gcc3
CCASFLAGS = -g -O2 -Wall -fno-strict-aliasing
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2 -Wall -fno-strict-aliasing
CPP = gcc -E
CPPFLAGS = 
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -Wall -fno-strict-aliasing
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = .exe
GREP = /bin/grep
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LDFLAGS = 
LIBOBJS = 
LIBS = -lXaw 
LN_S = ln -s
LTLIBOBJS = 
MAKEINFO = ${SHELL} /home/qmwx/project/prophet_vmips_final_keyming_131130/missing --run makeinfo
MIPSTOOLPREFIX = mipstoolprefix=''
MKDIR_P = /bin/mkdir -p
OBJEXT = o
PACKAGE = prophet_vmips
PACKAGE_BUGREPORT = 
PACKAGE_NAME = 
PACKAGE_STRING = 
PACKAGE_TARNAME = 
PACKAGE_VERSION = 
PATH_SEPARATOR = :
RANLIB = ranlib
SAMPLE_CODE_TARGETS = 
SET_MAKE = 
SHELL = /bin/bash
STRIP = 
TESTCODE_DIR = 
VERSION = 1.3.2
abs_builddir = /home/qmwx/project/prophet_vmips_final_keyming_131130/test_code/vmips.regcheck
abs_srcdir = /home/qmwx/project/prophet_vmips_final_keyming_131130/test_code/vmips.regcheck
abs_top_builddir = /home/qmwx/project/prophet_vmips_final_keyming_131130
abs_top_srcdir = /home/qmwx/project/prophet_vmips_final_keyming_131130
ac_ct_CC = gcc
ac_ct_CXX = g++
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = i686-pc-linux-gnu
build_alias = 
build_cpu = i686
build_os = linux-gnu
build_vendor = pc
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = i686-pc-linux-gnu
host_alias = 
host_cpu = i686
host_os = linux-gnu
host_vendor = pc
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = $(SHELL) /home/qmwx/project/prophet_vmips_final_keyming_131130/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mipsbin = /opt/mips/bin
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = NONE/com
srcdir = .
sysconfdir = ${prefix}/etc
target = i686-pc-linux-gnu
target_alias = 
target_cpu = i686
target_os = linux-gnu
target_vendor = pc
top_build_prefix = ../../
top_builddir = ../..
top_srcdir = ../..
VMIPSTOOL = ../../vmipstool -n -F ../../vmipsrc --ld-script=../../sample_code/ld.script
CPP_FLAGS = -I../.. -I../../sample_code
AM_CFLAGS = -g $(CPP_FLAGS)
SETUP = ../../sample_code/setup.o

# simple_asm bgezal
# multifile_asm -setup 0 bgezal bgezal.S
bgezal_SOURCES = bgezal.S

# simple_asm xor
# multifile_asm -setup 0 xor xor.S
xor_SOURCES = xor.S

# simple_c tester
# multifile_c tester tester.c
tester_LDFLAGS = $(SETUP)
tester_SOURCES = tester.c

# simple_asm logical
# multifile_asm -setup 0 logical logical.S
logical_SOURCES = logical.S

# simple_asm mumble
# multifile_asm -setup 0 mumble mumble.S
mumble_SOURCES = mumble.S

# simple_asm divu
# multifile_asm -setup 0 divu divu.S
divu_SOURCES = divu.S

# simple_asm mthi_lo
# multifile_asm -setup 0 mthi_lo mthi_lo.S
mthi_lo_SOURCES = mthi_lo.S

# simple_asm blez
# multifile_asm -setup 0 blez blez.S
blez_SOURCES = blez.S

# simple_asm haltdev
# multifile_asm -setup 0 haltdev haltdev.S
haltdev_SOURCES = haltdev.S

# simple_asm sub
# multifile_asm -setup 0 sub sub.S
sub_SOURCES = sub.S

# simple_asm lwl
# multifile_asm -setup 0 lwl lwl.S
lwl_SOURCES = lwl.S

# simple_asm lwr
# multifile_asm -setup 0 lwr lwr.S
lwr_SOURCES = lwr.S

# simple_asm -setup 1 swl
# multifile_asm -setup 1 swl swl.S
swl_LDFLAGS = $(SETUP)
swl_SOURCES = swl.S

# simple_asm -setup 1 swr
# multifile_asm -setup 1 swr swr.S
swr_LDFLAGS = $(SETUP)
swr_SOURCES = swr.S

# simple_asm multu
# multifile_asm -setup 0 multu multu.S
multu_SOURCES = multu.S

# simple_asm shift
# multifile_asm -setup 0 shift shift.S
shift_SOURCES = shift.S

# simple_asm coproc
# multifile_asm -setup 0 coproc coproc.S
coproc_SOURCES = coproc.S

# simple_asm bltz
# multifile_asm -setup 0 bltz bltz.S
bltz_SOURCES = bltz.S

# simple_asm sltiu
# multifile_asm -setup 0 sltiu sltiu.S
sltiu_SOURCES = sltiu.S

# simple_asm addi
# multifile_asm -setup 0 addi addi.S
addi_SOURCES = addi.S

# simple_asm srlv
# multifile_asm -setup 0 srlv srlv.S
srlv_SOURCES = srlv.S

# simple_asm add
# multifile_asm -setup 0 add add.S
add_SOURCES = add.S

# simple_asm jalr
# multifile_asm -setup 0 jalr jalr.S
jalr_SOURCES = jalr.S

# simple_asm bc0
# multifile_asm -setup 0 bc0 bc0.S
bc0_SOURCES = bc0.S

# simple_asm load
# multifile_asm -setup 0 load load.S
load_SOURCES = load.S

# simple_asm -setup 1 tlbwr
# multifile_asm -setup 1 tlbwr tlbwr.S
tlbwr_LDFLAGS = $(SETUP)
tlbwr_SOURCES = tlbwr.S

# simple_asm slti
# multifile_asm -setup 0 slti slti.S
slti_SOURCES = slti.S

# simple_asm -setup 1 store
# multifile_asm -setup 1 store store.S
store_LDFLAGS = $(SETUP)
store_SOURCES = store.S

# simple_asm handler5
# multifile_asm -setup 0 handler5 handler5.S
handler5_SOURCES = handler5.S

# simple_asm bgtz
# multifile_asm -setup 0 bgtz bgtz.S
bgtz_SOURCES = bgtz.S

# simple_asm syscall
# multifile_asm -setup 0 syscall syscall.S
syscall_SOURCES = syscall.S

# simple_asm bltzal
# multifile_asm -setup 0 bltzal bltzal.S
bltzal_SOURCES = bltzal.S
LINK = $(VMIPSTOOL) --link -o $@
COMPILE = $(VMIPSTOOL) --compile $(CFLAGS)
ASCOMPILE = $(VMIPSTOOL) --compile $(CFLAGS)
CCASCOMPILE = $(VMIPSTOOL) --compile $(CFLAGS)
CLEANFILES = bgezal.rom xor.rom tester.rom logical.rom mumble.rom divu.rom mthi_lo.rom blez.rom haltdev.rom sub.rom lwl.rom lwr.rom swl.rom swr.rom multu.rom shift.rom coproc.rom bltz.rom sltiu.rom addi.rom srlv.rom add.rom jalr.rom bc0.rom load.rom tlbwr.rom slti.rom store.rom handler5.rom bgtz.rom syscall.rom bltzal.rom
EXTRA_DIST = regcheck.exp  bgezal.par xor.par tester.par logical.par mumble.par divu.par mthi_lo.par blez.par haltdev.par sub.par lwl.par lwr.par swl.par swr.par multu.par shift.par coproc.par bltz.par sltiu.par addi.par srlv.par add.par jalr.par bc0.par load.par tlbwr.par slti.par store.par handler5.par bgtz.par syscall.par bltzal.par
all: all-am

.SUFFIXES:
.SUFFIXES: .S .c .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu  test_code/vmips.regcheck/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  test_code/vmips.regcheck/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

clean-noinstPROGRAMS:
	-test -z "$(noinst_PROGRAMS)" || rm -f $(noinst_PROGRAMS)
add$(EXEEXT): $(add_OBJECTS) $(add_DEPENDENCIES) 
	@rm -f add$(EXEEXT)
	$(LINK) $(add_OBJECTS) $(add_LDADD) $(LIBS)
addi$(EXEEXT): $(addi_OBJECTS) $(addi_DEPENDENCIES) 
	@rm -f addi$(EXEEXT)
	$(LINK) $(addi_OBJECTS) $(addi_LDADD) $(LIBS)
bc0$(EXEEXT): $(bc0_OBJECTS) $(bc0_DEPENDENCIES) 
	@rm -f bc0$(EXEEXT)
	$(LINK) $(bc0_OBJECTS) $(bc0_LDADD) $(LIBS)
bgezal$(EXEEXT): $(bgezal_OBJECTS) $(bgezal_DEPENDENCIES) 
	@rm -f bgezal$(EXEEXT)
	$(LINK) $(bgezal_OBJECTS) $(bgezal_LDADD) $(LIBS)
bgtz$(EXEEXT): $(bgtz_OBJECTS) $(bgtz_DEPENDENCIES) 
	@rm -f bgtz$(EXEEXT)
	$(LINK) $(bgtz_OBJECTS) $(bgtz_LDADD) $(LIBS)
blez$(EXEEXT): $(blez_OBJECTS) $(blez_DEPENDENCIES) 
	@rm -f blez$(EXEEXT)
	$(LINK) $(blez_OBJECTS) $(blez_LDADD) $(LIBS)
bltz$(EXEEXT): $(bltz_OBJECTS) $(bltz_DEPENDENCIES) 
	@rm -f bltz$(EXEEXT)
	$(LINK) $(bltz_OBJECTS) $(bltz_LDADD) $(LIBS)
bltzal$(EXEEXT): $(bltzal_OBJECTS) $(bltzal_DEPENDENCIES) 
	@rm -f bltzal$(EXEEXT)
	$(LINK) $(bltzal_OBJECTS) $(bltzal_LDADD) $(LIBS)
coproc$(EXEEXT): $(coproc_OBJECTS) $(coproc_DEPENDENCIES) 
	@rm -f coproc$(EXEEXT)
	$(LINK) $(coproc_OBJECTS) $(coproc_LDADD) $(LIBS)
divu$(EXEEXT): $(divu_OBJECTS) $(divu_DEPENDENCIES) 
	@rm -f divu$(EXEEXT)
	$(LINK) $(divu_OBJECTS) $(divu_LDADD) $(LIBS)
haltdev$(EXEEXT): $(haltdev_OBJECTS) $(haltdev_DEPENDENCIES) 
	@rm -f haltdev$(EXEEXT)
	$(LINK) $(haltdev_OBJECTS) $(haltdev_LDADD) $(LIBS)
handler5$(EXEEXT): $(handler5_OBJECTS) $(handler5_DEPENDENCIES) 
	@rm -f handler5$(EXEEXT)
	$(LINK) $(handler5_OBJECTS) $(handler5_LDADD) $(LIBS)
jalr$(EXEEXT): $(jalr_OBJECTS) $(jalr_DEPENDENCIES) 
	@rm -f jalr$(EXEEXT)
	$(LINK) $(jalr_OBJECTS) $(jalr_LDADD) $(LIBS)
load$(EXEEXT): $(load_OBJECTS) $(load_DEPENDENCIES) 
	@rm -f load$(EXEEXT)
	$(LINK) $(load_OBJECTS) $(load_LDADD) $(LIBS)
logical$(EXEEXT): $(logical_OBJECTS) $(logical_DEPENDENCIES) 
	@rm -f logical$(EXEEXT)
	$(LINK) $(logical_OBJECTS) $(logical_LDADD) $(LIBS)
lwl$(EXEEXT): $(lwl_OBJECTS) $(lwl_DEPENDENCIES) 
	@rm -f lwl$(EXEEXT)
	$(LINK) $(lwl_OBJECTS) $(lwl_LDADD) $(LIBS)
lwr$(EXEEXT): $(lwr_OBJECTS) $(lwr_DEPENDENCIES) 
	@rm -f lwr$(EXEEXT)
	$(LINK) $(lwr_OBJECTS) $(lwr_LDADD) $(LIBS)
mthi_lo$(EXEEXT): $(mthi_lo_OBJECTS) $(mthi_lo_DEPENDENCIES) 
	@rm -f mthi_lo$(EXEEXT)
	$(LINK) $(mthi_lo_OBJECTS) $(mthi_lo_LDADD) $(LIBS)
multu$(EXEEXT): $(multu_OBJECTS) $(multu_DEPENDENCIES) 
	@rm -f multu$(EXEEXT)
	$(LINK) $(multu_OBJECTS) $(multu_LDADD) $(LIBS)
mumble$(EXEEXT): $(mumble_OBJECTS) $(mumble_DEPENDENCIES) 
	@rm -f mumble$(EXEEXT)
	$(LINK) $(mumble_OBJECTS) $(mumble_LDADD) $(LIBS)
shift$(EXEEXT): $(shift_OBJECTS) $(shift_DEPENDENCIES) 
	@rm -f shift$(EXEEXT)
	$(LINK) $(shift_OBJECTS) $(shift_LDADD) $(LIBS)
slti$(EXEEXT): $(slti_OBJECTS) $(slti_DEPENDENCIES) 
	@rm -f slti$(EXEEXT)
	$(LINK) $(slti_OBJECTS) $(slti_LDADD) $(LIBS)
sltiu$(EXEEXT): $(sltiu_OBJECTS) $(sltiu_DEPENDENCIES) 
	@rm -f sltiu$(EXEEXT)
	$(LINK) $(sltiu_OBJECTS) $(sltiu_LDADD) $(LIBS)
srlv$(EXEEXT): $(srlv_OBJECTS) $(srlv_DEPENDENCIES) 
	@rm -f srlv$(EXEEXT)
	$(LINK) $(srlv_OBJECTS) $(srlv_LDADD) $(LIBS)
store$(EXEEXT): $(store_OBJECTS) $(store_DEPENDENCIES) 
	@rm -f store$(EXEEXT)
	$(store_LINK) $(store_OBJECTS) $(store_LDADD) $(LIBS)
sub$(EXEEXT): $(sub_OBJECTS) $(sub_DEPENDENCIES) 
	@rm -f sub$(EXEEXT)
	$(LINK) $(sub_OBJECTS) $(sub_LDADD) $(LIBS)
swl$(EXEEXT): $(swl_OBJECTS) $(swl_DEPENDENCIES) 
	@rm -f swl$(EXEEXT)
	$(swl_LINK) $(swl_OBJECTS) $(swl_LDADD) $(LIBS)
swr$(EXEEXT): $(swr_OBJECTS) $(swr_DEPENDENCIES) 
	@rm -f swr$(EXEEXT)
	$(swr_LINK) $(swr_OBJECTS) $(swr_LDADD) $(LIBS)
syscall$(EXEEXT): $(syscall_OBJECTS) $(syscall_DEPENDENCIES) 
	@rm -f syscall$(EXEEXT)
	$(LINK) $(syscall_OBJECTS) $(syscall_LDADD) $(LIBS)
tester$(EXEEXT): $(tester_OBJECTS) $(tester_DEPENDENCIES) 
	@rm -f tester$(EXEEXT)
	$(tester_LINK) $(tester_OBJECTS) $(tester_LDADD) $(LIBS)
tlbwr$(EXEEXT): $(tlbwr_OBJECTS) $(tlbwr_DEPENDENCIES) 
	@rm -f tlbwr$(EXEEXT)
	$(tlbwr_LINK) $(tlbwr_OBJECTS) $(tlbwr_LDADD) $(LIBS)
xor$(EXEEXT): $(xor_OBJECTS) $(xor_DEPENDENCIES) 
	@rm -f xor$(EXEEXT)
	$(LINK) $(xor_OBJECTS) $(xor_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/add.Po
include ./$(DEPDIR)/addi.Po
include ./$(DEPDIR)/bc0.Po
include ./$(DEPDIR)/bgezal.Po
include ./$(DEPDIR)/bgtz.Po
include ./$(DEPDIR)/blez.Po
include ./$(DEPDIR)/bltz.Po
include ./$(DEPDIR)/bltzal.Po
include ./$(DEPDIR)/coproc.Po
include ./$(DEPDIR)/divu.Po
include ./$(DEPDIR)/haltdev.Po
include ./$(DEPDIR)/handler5.Po
include ./$(DEPDIR)/jalr.Po
include ./$(DEPDIR)/load.Po
include ./$(DEPDIR)/logical.Po
include ./$(DEPDIR)/lwl.Po
include ./$(DEPDIR)/lwr.Po
include ./$(DEPDIR)/mthi_lo.Po
include ./$(DEPDIR)/multu.Po
include ./$(DEPDIR)/mumble.Po
include ./$(DEPDIR)/shift.Po
include ./$(DEPDIR)/slti.Po
include ./$(DEPDIR)/sltiu.Po
include ./$(DEPDIR)/srlv.Po
include ./$(DEPDIR)/store.Po
include ./$(DEPDIR)/sub.Po
include ./$(DEPDIR)/swl.Po
include ./$(DEPDIR)/swr.Po
include ./$(DEPDIR)/syscall.Po
include ./$(DEPDIR)/tester.Po
include ./$(DEPDIR)/tlbwr.Po
include ./$(DEPDIR)/xor.Po

.S.o:
	$(CPPASCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCASDEPMODE) $(depcomp) \
#	$(CPPASCOMPILE) -c -o $@ $<

.S.obj:
	$(CPPASCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCASDEPMODE) $(depcomp) \
#	$(CPPASCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.c.o:
	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c $<

.c.obj:
	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `$(CYGPATH_W) '$<'`

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS)
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic clean-noinstPROGRAMS mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-exec-am:

install-html: install-html-am

install-info: install-info-am

install-man:

install-pdf: install-pdf-am

install-ps: install-ps-am

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am:

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-generic \
	clean-noinstPROGRAMS ctags distclean distclean-compile \
	distclean-generic distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-data \
	install-data-am install-dvi install-dvi-am install-exec \
	install-exec-am install-html install-html-am install-info \
	install-info-am install-man install-pdf install-pdf-am \
	install-ps install-ps-am install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic pdf pdf-am ps ps-am tags uninstall \
	uninstall-am

bgezal.rom: bgezal.exe
	$(VMIPSTOOL) --make-rom bgezal.exe bgezal.rom
xor.rom: xor.exe
	$(VMIPSTOOL) --make-rom xor.exe xor.rom
tester.rom: tester.exe
	$(VMIPSTOOL) --make-rom tester.exe tester.rom
logical.rom: logical.exe
	$(VMIPSTOOL) --make-rom logical.exe logical.rom
mumble.rom: mumble.exe
	$(VMIPSTOOL) --make-rom mumble.exe mumble.rom
divu.rom: divu.exe
	$(VMIPSTOOL) --make-rom divu.exe divu.rom
mthi_lo.rom: mthi_lo.exe
	$(VMIPSTOOL) --make-rom mthi_lo.exe mthi_lo.rom
blez.rom: blez.exe
	$(VMIPSTOOL) --make-rom blez.exe blez.rom
haltdev.rom: haltdev.exe
	$(VMIPSTOOL) --make-rom haltdev.exe haltdev.rom
sub.rom: sub.exe
	$(VMIPSTOOL) --make-rom sub.exe sub.rom
lwl.rom: lwl.exe
	$(VMIPSTOOL) --make-rom lwl.exe lwl.rom
lwr.rom: lwr.exe
	$(VMIPSTOOL) --make-rom lwr.exe lwr.rom
swl.rom: swl.exe
	$(VMIPSTOOL) --make-rom swl.exe swl.rom
swr.rom: swr.exe
	$(VMIPSTOOL) --make-rom swr.exe swr.rom
multu.rom: multu.exe
	$(VMIPSTOOL) --make-rom multu.exe multu.rom
shift.rom: shift.exe
	$(VMIPSTOOL) --make-rom shift.exe shift.rom
coproc.rom: coproc.exe
	$(VMIPSTOOL) --make-rom coproc.exe coproc.rom
bltz.rom: bltz.exe
	$(VMIPSTOOL) --make-rom bltz.exe bltz.rom
sltiu.rom: sltiu.exe
	$(VMIPSTOOL) --make-rom sltiu.exe sltiu.rom
addi.rom: addi.exe
	$(VMIPSTOOL) --make-rom addi.exe addi.rom
srlv.rom: srlv.exe
	$(VMIPSTOOL) --make-rom srlv.exe srlv.rom
add.rom: add.exe
	$(VMIPSTOOL) --make-rom add.exe add.rom
jalr.rom: jalr.exe
	$(VMIPSTOOL) --make-rom jalr.exe jalr.rom
bc0.rom: bc0.exe
	$(VMIPSTOOL) --make-rom bc0.exe bc0.rom
load.rom: load.exe
	$(VMIPSTOOL) --make-rom load.exe load.rom
tlbwr.rom: tlbwr.exe
	$(VMIPSTOOL) --make-rom tlbwr.exe tlbwr.rom
slti.rom: slti.exe
	$(VMIPSTOOL) --make-rom slti.exe slti.rom
store.rom: store.exe
	$(VMIPSTOOL) --make-rom store.exe store.rom
handler5.rom: handler5.exe
	$(VMIPSTOOL) --make-rom handler5.exe handler5.rom
bgtz.rom: bgtz.exe
	$(VMIPSTOOL) --make-rom bgtz.exe bgtz.rom
syscall.rom: syscall.exe
	$(VMIPSTOOL) --make-rom syscall.exe syscall.rom
bltzal.rom: bltzal.exe
	$(VMIPSTOOL) --make-rom bltzal.exe bltzal.rom

# 1 C testcases and 31 asm testcases.
# 0 custom makefile fragment testcases.
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
