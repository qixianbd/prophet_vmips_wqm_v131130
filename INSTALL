These installation instructions are copied from the VMIPS Manual. For
bug-reporting instructions, please see the README file in the source
distribution, or read the VMIPS Manual.


Appendix A Installation
***********************

VMIPS uses the GNU Autoconf/Automake system for configuration
management.  This provides the familiar `configure' shell script
interface for setting configuration variables before compiling VMIPS.
This means that the traditional `./configure; make; make install'
sequence should work.  For more information about the special options
that VMIPS `configure' accepts, read on, or give the `--help' option to
`configure' for an abridged version.

A.1 Prerequisites
=================

The VMIPS build process assumes that you have a C++ compiler installed
on the host machine which can deal correctly with template functions.
In particular, using GCC 2.91.66, also known as EGCS 1.1.2 (the system
compiler on Red Hat Linux 6.x systems)--or, we suspect, any older
compiler--is not possible, because the compiler will crash, giving an
"internal compiler error" message when trying to compile various VMIPS
subsystems.  For that reason, `configure' checks for the bug in
question and will print an error message ("your C++ compiler's template
function handling is buggy") if you attempt to use a deficient compiler.

   If you want to build any of the sample code which is included with
the VMIPS source distribution, you must have a full set of GNU MIPS
cross compilation tools installed when you configure VMIPS.  You will
need to tell `configure' the configuration prefix you used to install
the MIPS tools, by specifying it as the value to the `--with-mips'
argument. For example, if your MIPS cross compiler is
`/opt/mipsTools/bin/mips-dec-ultrix4.3-gcc', then you should specify
`--with-mips=/opt/mipsTools' on the `configure' command line.
Additionally, you will also need to tell `configure' the target you
used to configure the MIPS cross tools, by specifying it as the value
to the `--target' argument (see below).  For a concise summary of how
to build the necessary MIPS cross tools, read "Building MIPS Cross
Tools", below.

   If you want to run the test suite, you must additionally have Expect
and DejaGNU installed (any version published since 2000 should be
fine). Once VMIPS is compiled, you can type `make check' to run the
test suite.

A.2 Building from CVS
=====================

If you retrieved your sources from the CVS repository, you will need
Automake version 1.4 or later, Autoconf version 2.13 or later, and
libtool 1.2f or later. Newer versions of Autoconf (2.52f, 2.53) have
been tested, and should also work.  You will need perl 5 to build the
documentation.  Your distribution will be missing many important files,
including `configure'. To generate these, run `utils/bootstrap'. To
automatically run configure once it has been generated, you can run
`utils/bootstrap -c CONFIGURE-ARGS'.

A.3 Options that configure supports
===================================

Some of the interesting options that `configure' supports are as
follows:

`--target=T'
     Specify the target used to configure your MIPS cross tools. `T'
     must match the value of the `--target' option provided to GNU
     Binutils `configure'.

`--with-mips=MDIR'
     Specify installation prefix of MIPS cross tools (default MDIR =
     /opt/mips).  If you do not have MIPS cross tools, the VMIPS test
     suite will not be available and sample code will not be built. If
     you want `configure' to ignore your MIPS cross tools, you can
     indicate this by specifying `--without-mips'.

     This flag is used to set the default value of the vmipsrc
     `mipstoolprefix' option. You can always edit the `mipstoolprefix'
     option setting in `/etc/vmipsrc' after installation if you want to
     change its value.

`--with-mips-bin=DIR'
     Specify path to MIPS cross tools' executables (default MDIR/bin).
     This option may be useful as an override if -with-mips isn't
     working for you, but beware -- it is rarely tested by the
     developers.

`--with-mips-endianness=VAL'
     Specify the default endianness of the VMIPS simulated machine,
     which must match the MIPS cross tools target's endianness.  VAL
     may be specified as `big' or `little'.  If you have installed MIPS
     cross tools, it is best to let configure guess this (which it will
     do by running `mips-objdump -i'), unless you have reason to
     believe it is guessing wrong, because if you get it wrong,
     vmipstool may compile ROMs that do not run correctly under vmips.
     If you are configuring without MIPS cross tools installed, this
     will default to little-endian.

     This flag is used to set the default value of the vmipsrc
     `bigendian' option. You can always edit the `bigendian' option
     setting in `/etc/vmipsrc' after installation if you want to change
     this value.

`--disable-debug'
     When you use this flag, `configure' will
        * Turn on various compiler optimizations (compile with -O2)

        * Strip debugging symbols from executables (link with -s), but
          only if `--enable-profiling' is not also turned on

        * Initialize VMIPS registers to zero

        * Disable runtime assertion checks

     When you do not use this flag, `configure' will
        * Turn on debug info in the compiler (compile with -g)

        * Initialize VMIPS registers to random values

        * Compile in runtime assertion checks

`--enable-profiling'
     Include (default=do not include) profiling instrumentation in the
     VMIPS binary. This is only interesting if you are maintaining
     VMIPS and trying to figure out why it is running more slowly than
     it should be. This option doesn't seem to work very well on Mac OS
     X. Setting this option inhibits stripping the executables.


A.4 Post-Installation Setup
===========================

If you are an end-user with a binary package for VMIPS and a MIPS cross
compiler, you will probably want to make Vmipstool use the cross
compiler when you run commands such as `vmipstool --compile'.

   You should edit your `/etc/vmipsrc' or `~/.vmipsrc' file and change
the `bigendian' and `mipstoolprefix' options to correspond to the
installed MIPS cross tools. (See the `Customizing' chapter for more
information on the syntax of these options.) Then, test it by trying to
compile a C file by running `vmipstool --compile -c foo.c'. You should
get an object file (`foo.o') of the right endianness and object format;
you can check this using the `file' command on most Unix systems.

A.5 Packaging VMIPS
===================

If you are a system integrator or distributor who is building a package
for VMIPS intended for distribution, you may be able to start by
looking at the RPM vmips.spec file or the Debian dpkg packaging files
included in the source distribution.

   Your VMIPS package need not require a set of MIPS cross tools either
at the build or install stage.  Starting with VMIPS 1.2, it is
perfectly possible to build VMIPS without a cross-compiler,
cross-assembler, or cross-linker.  Vmipstool will not be very useful
without cross-tools, but it will build; however, an end-user can
install cross-tools and edit the system-wide `vmipsrc' file to make the
`mipstoolprefix' option value contain their location.

   The VMIPS binary package should probably include the following files:
   * the two executables `vmips' and `vmipstool'

   * the two man pages `vmips.1' and `vmipstool.1'

   * the VMIPS Programmer's Manual in some format (for example, the
     Info file `vmips.info')

   * the default GNU linker script used by vmipstool, `ld.script'

   * the system-wide configuration file `/etc/vmipsrc'

   * the assembler convenience header file `asm_regnames.h'

   Help keep VMIPS free! As VMIPS is released under the GNU General
Public License, please make an effort to distribute sources (or at
least, post a link to the sources) if you distribute binaries or binary
packages. Thanks!

A.6 Building MIPS Cross Tools
=============================

First decide on an installation prefix. The following examples will use
the prefix `/opt/mips', as above, which is the default place that the
VMIPS `configure' script looks for them; you can however use any prefix
you wish.

   Download a copy of Binutils, from any GNU mirror, or from the URL:
     `ftp://sources.redhat.com/pub/binutils/releases'
   We recommend getting version 2.11.2 or 2.13.2.1.

   Build binutils by running the following commands. We recommend
`--disable-nls' because some recent versions do not build correctly with
NLS (linking against `libopcodes.a' results in unresolved symbols.)

     ./configure --target=mipsel-ecoff --prefix=/opt/mips \
      --disable-nls --enable-shared
     make
     make install install-info

   Download a copy of the GNU Compiler Collection (`gcc') from any GNU
mirror, or from the URL:
     `ftp://gcc.gnu.org/pub/gcc/releases'
   You should be able to use any version from 3.0 through 3.4. We've
mostly tested with 3.0.4. Our examples (below) will assume 3.0.4.

   You can read the documentation for building the compiler by pointing
your World-Wide Web browser at `http://gcc.gnu.org/install'.  When you
encounter difficulties, you should consider consulting the
documentation for building the compiler, because it is more complete
than the following summary.

  1. Unpack the sources. Let's say you unpack them in `/usr/build',
     creating the directory `/usr/build/gcc-3.0.4'.

  2. Create the build directory `/usr/build/gcc-mips-build'.

  3. First, add the directory `/opt/mips/bin' (where you just installed
     Binutils) to your path, so that the compiler configuration process
     can find your MIPS-targetted assembler and linker.

  4. Configure the compiler. Change to the directory
     `/usr/build/gcc-mips-build' and issue the following command. (The
     back-slash characters represent the usual Unix shell convention of
     continuing a command on the following line, and are inserted for
     typesetting purposes.)

          ../gcc-3.0.4/configure --target=mipsel-ecoff \
           --prefix=/opt/mips --with-gnu-as --with-gnu-ld \
           --disable-threads --disable-shared

  5. If the configuration step fails, make sure you have a working
     native compiler, and/or try a different version of gcc. Otherwise,
     proceed to compile the compiler:

          make -k MAKE='make -k TARGET_LIBGCC2_CFLAGS=-Dinhibit_libc' cross
          make -k LANGUAGES=c install

     The reason `make -k' is required is because some parts of the gcc
     toolkit may fail to build, but the compiler itself may be OK.

     The `-Dinhibit_libc' option is required when you are building the
     compiler in the absence of a MIPS C library, as is often the case
     with VMIPS users.

     Do not be alarmed by errors in building or installing the compiler;
     the cross compiler install interface is less than polished.

  6. You should be able to use the newly-installed  compiler to compile
     (but not link) a program that does not use any C library functions.
     If this works, you should be able to use the cross tools you have
     just built for VMIPS.

  7. If you want to use the GNU debugger (GDB) to debug MIPS programs
     running on VMIPS, you can build that now.

       1. Download a copy of the GNU debugger from any GNU mirror, or
          from the URL:
               `ftp://ftp.gnu.org/pub/gnu/gdb/'
          We recommend version 5.2.1. Download the file
          `gdb-5.2.1.tar.gz'.

       2. Unpack the file and change to the directory `gdb-5.2.1'.

       3. Type the following commands to configure and build GDB:
               ./configure --prefix=/opt/mips --target=mipsel-ecoff
               make
               make install install-info

       4. You can now use the newly installed `mipsel-ecoff-gdb' to
          debug programs with VMIPS, as described in the "Debugging"
          section of the manual.

  8. If you want to build a MIPS C library, you can also do that now,
     but it is not strictly required for many useful VMIPS tasks.

     Here is how to build the uClibc C library for use with VMIPS:

     As noted in the uClibc INSTALL file, you will need Linux kernel
     sources.  Just pick a recent version of Linux 2.4; you can
     download it from `http://www.kernel.org' or one of its mirrors, if
     you don't have it handy.  You will need to configure (but not
     build) the Linux kernel for MIPS. Here's how:

        * Edit `linux/Makefile', setting ARCH to `mips' and setting
          CROSS_COMPILE to a value that corresponds to the path where
          your MIPS cross compiler is installed, for example:
          `/opt/mips-elf/bin/mips-elf-' (this is just like
          `mipstoolprefix' in your `vmipsrc' file).

        * Copy `arch/mips/defconfig' to `.config'.

        * Run `make oldconfig' and `make dep'.

     Next, download uClibc from `http://www.uclibc.org', and unpack it
     next to the Linux kernel sources. The last version we tested was
     0.9.26.  Read the `INSTALL' file in that distribution.

     When you configure uClibc with `make config', be sure to pick
     `mips' as your Target Architecture, and `Generic (MIPS I)' as your
     Target Processor. Be sure to pick the correct endianness (that is,
     the one which corresponds to the default endianness of your cross
     tools.) You should be sure to answer yes to 'Target CPU has a
     memory management unit (MMU)' and no to 'Enable floating point
     number support', because current versions of VMIPS do not include
     floating-point support.  If you are intending to use uClibc to
     build ROMs, you will probably want to turn off
     position-independent code and shared library support.  Turn on
     only those other features of uClibc as you expect you will need.
     For the DEVEL_PREFIX, specify a new empty directory.

     Then run `make CROSS=/opt/mips-elf/bin/mips-elf-' to build uClibc
     (for CROSS, you should use the same value as you used for
     CROSS_COMPILE in the Linux Makefile, above) and run `make install'
     to install it.

     In the directory you specified for DEVEL_PREFIX when configuring
     uClibc, above, you will now have `usr/include' and `usr/lib'
     subdirectories. You will now want to copy these to where your
     cross compiler can detect and use them. For GCC, the directories
     are

        * PREFIX/TARGET-TRIPLET/lib  (for libraries)

        * PREFIX/TARGET-TRIPLET/sys-include  (for includes)

     For example, if you configured GCC for target `mips-unknown-elf'
     with prefix `/usr/local/mips', you would copy the `usr/include'
     directory to `/usr/local/mips/mips-unknown-elf/sys-include', and
     copy the `usr/lib' directory to
     `/usr/local/mips/mips-unknown-elf/lib'.


The remainder of this file represents generic (i.e., not VMIPS-specific)
instructions for using "configure".

Copyright (C) 1994, 1995, 1996, 1999, 2000, 2001, 2002 Free Software
Foundation, Inc.

   This file is free documentation; the Free Software Foundation gives
unlimited permission to copy, distribute and modify it.

Basic Installation
==================

   These are generic installation instructions.

   The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation.  It uses
those values to create a `Makefile' in each directory of the package.
It may also create one or more `.h' files containing system-dependent
definitions.  Finally, it creates a shell script `config.status' that
you can run in the future to recreate the current configuration, and a
file `config.log' containing compiler output (useful mainly for
debugging `configure').

   It can also use an optional file (typically called `config.cache'
and enabled with `--cache-file=config.cache' or simply `-C') that saves
the results of its tests to speed up reconfiguring.  (Caching is
disabled by default to prevent problems with accidental use of stale
cache files.)

   If you need to do unusual things to compile the package, please try
to figure out how `configure' could check whether to do them, and mail
diffs or instructions to the address given in the `README' so they can
be considered for the next release.  If you are using the cache, and at
some point `config.cache' contains results you don't want to keep, you
may remove or edit it.

   The file `configure.ac' (or `configure.in') is used to create
`configure' by a program called `autoconf'.  You only need
`configure.ac' if you want to change it or regenerate `configure' using
a newer version of `autoconf'.

The simplest way to compile this package is:

  1. `cd' to the directory containing the package's source code and type
     `./configure' to configure the package for your system.  If you're
     using `csh' on an old version of System V, you might need to type
     `sh ./configure' instead to prevent `csh' from trying to execute
     `configure' itself.

     Running `configure' takes awhile.  While running, it prints some
     messages telling which features it is checking for.

  2. Type `make' to compile the package.

  3. Optionally, type `make check' to run any self-tests that come with
     the package.

  4. Type `make install' to install the programs and any data files and
     documentation.

  5. You can remove the program binaries and object files from the
     source code directory by typing `make clean'.  To also remove the
     files that `configure' created (so you can compile the package for
     a different kind of computer), type `make distclean'.  There is
     also a `make maintainer-clean' target, but that is intended mainly
     for the package's developers.  If you use it, you may have to get
     all sorts of other programs in order to regenerate files that came
     with the distribution.

Compilers and Options
=====================

   Some systems require unusual options for compilation or linking that
the `configure' script does not know about.  Run `./configure --help'
for details on some of the pertinent environment variables.

   You can give `configure' initial values for configuration parameters
by setting variables in the command line or in the environment.  Here
is an example:

     ./configure CC=c89 CFLAGS=-O2 LIBS=-lposix

   *Note Defining Variables::, for more details.

Compiling For Multiple Architectures
====================================

   You can compile the package for more than one kind of computer at the
same time, by placing the object files for each architecture in their
own directory.  To do this, you must use a version of `make' that
supports the `VPATH' variable, such as GNU `make'.  `cd' to the
directory where you want the object files and executables to go and run
the `configure' script.  `configure' automatically checks for the
source code in the directory that `configure' is in and in `..'.

   If you have to use a `make' that does not support the `VPATH'
variable, you have to compile the package for one architecture at a
time in the source code directory.  After you have installed the
package for one architecture, use `make distclean' before reconfiguring
for another architecture.

Installation Names
==================

   By default, `make install' will install the package's files in
`/usr/local/bin', `/usr/local/man', etc.  You can specify an
installation prefix other than `/usr/local' by giving `configure' the
option `--prefix=PATH'.

   You can specify separate installation prefixes for
architecture-specific files and architecture-independent files.  If you
give `configure' the option `--exec-prefix=PATH', the package will use
PATH as the prefix for installing programs and libraries.
Documentation and other data files will still use the regular prefix.

   In addition, if you use an unusual directory layout you can give
options like `--bindir=PATH' to specify different values for particular
kinds of files.  Run `configure --help' for a list of the directories
you can set and what kinds of files go in them.

   If the package supports it, you can cause programs to be installed
with an extra prefix or suffix on their names by giving `configure' the
option `--program-prefix=PREFIX' or `--program-suffix=SUFFIX'.

Optional Features
=================

   Some packages pay attention to `--enable-FEATURE' options to
`configure', where FEATURE indicates an optional part of the package.
They may also pay attention to `--with-PACKAGE' options, where PACKAGE
is something like `gnu-as' or `x' (for the X Window System).  The
`README' should mention any `--enable-' and `--with-' options that the
package recognizes.

   For packages that use the X Window System, `configure' can usually
find the X include and library files automatically, but if it doesn't,
you can use the `configure' options `--x-includes=DIR' and
`--x-libraries=DIR' to specify their locations.

Specifying the System Type
==========================

   There may be some features `configure' cannot figure out
automatically, but needs to determine by the type of machine the package
will run on.  Usually, assuming the package is built to be run on the
_same_ architectures, `configure' can figure that out, but if it prints
a message saying it cannot guess the machine type, give it the
`--build=TYPE' option.  TYPE can either be a short name for the system
type, such as `sun4', or a canonical name which has the form:

     CPU-COMPANY-SYSTEM

where SYSTEM can have one of these forms:

     OS KERNEL-OS

   See the file `config.sub' for the possible values of each field.  If
`config.sub' isn't included in this package, then this package doesn't
need to know the machine type.

   If you are _building_ compiler tools for cross-compiling, you should
use the `--target=TYPE' option to select the type of system they will
produce code for.

   If you want to _use_ a cross compiler, that generates code for a
platform different from the build platform, you should specify the
"host" platform (i.e., that on which the generated programs will
eventually be run) with `--host=TYPE'.

Sharing Defaults
================

   If you want to set default values for `configure' scripts to share,
you can create a site shell script called `config.site' that gives
default values for variables like `CC', `cache_file', and `prefix'.
`configure' looks for `PREFIX/share/config.site' if it exists, then
`PREFIX/etc/config.site' if it exists.  Or, you can set the
`CONFIG_SITE' environment variable to the location of the site script.
A warning: not all `configure' scripts look for a site script.

Defining Variables
==================

   Variables not defined in a site shell script can be set in the
environment passed to `configure'.  However, some packages may run
configure again during the build, and the customized values of these
variables may be lost.  In order to avoid this problem, you should set
them in the `configure' command line, using `VAR=value'.  For example:

     ./configure CC=/usr/local2/bin/gcc

will cause the specified gcc to be used as the C compiler (unless it is
overridden in the site shell script).

`configure' Invocation
======================

   `configure' recognizes the following options to control how it
operates.

`--help'
`-h'
     Print a summary of the options to `configure', and exit.

`--version'
`-V'
     Print the version of Autoconf used to generate the `configure'
     script, and exit.

`--cache-file=FILE'
     Enable the cache: use and save the results of the tests in FILE,
     traditionally `config.cache'.  FILE defaults to `/dev/null' to
     disable caching.

`--config-cache'
`-C'
     Alias for `--cache-file=config.cache'.

`--quiet'
`--silent'
`-q'
     Do not print messages saying which checks are being made.  To
     suppress all normal output, redirect it to `/dev/null' (any error
     messages will still be shown).

`--srcdir=DIR'
     Look for the package's source code in directory DIR.  Usually
     `configure' can determine that directory automatically.

`configure' also accepts some other, not widely useful, options.  Run
`configure --help' for more details.

